<style lang="less">
@import "../styles/other/font.less";

.field-cell {
  position: relative;
  padding: 12px 15px;
  display: flex;
  flex-direction: row;
  align-items: center;
  line-height: 1.4em;
  font-size: 14px
}

.field-cell::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 200%;
  height: 200%;
  transform: scale(.5);
  transform-origin: 0 0;
  pointer-events: none;
  box-sizing: border-box;
  border: 0 solid #e5e5e5;
  border-bottom-width: 1px;
  left: 15px;
  right: 0
}

.field-cell__icon {
  margin-right: 5px
}

.field-cell__bd {
  flex: 1
}

.field-cell__text {
  line-height: 24px;
  font-size: 14px
}

.field-cell__desc {
  line-height: 1.2em;
  font-size: 12px;
  color: #666
}

.field-cell__ft {
  position: relative;
  text-align: right;
  color: #666
}

.field-cell__no-pading {
  padding: 0
}

.field-cell__no-pading .field-cell__bd_padding {
  padding: 12px 0 12px 15px
}

.field-cell__no-pading .field-cell__bd_padding .form-input {
  height: 26px
}

.field-cell__no-pading .field-cell__ft_padding {
  padding: 12px 15px 12px 0
}

.field-cell__last-child::after, .cell:last-child::after {
  display: none
}

.field-cell__access .field-cell__ft {
  padding-right: 13px
}

.field-cell__access .field-cell__ft::after {
  position: absolute;
  top: 50%;
  right: 2px;
  content: " ";
  display: inline-block;
  height: 6px;
  width: 6px;
  border-width: 2px 2px 0 0;
  border-color: #c8c8c8;
  border-style: solid;
  transform: translateY(-50%) matrix(.71, .71, -.71, .71, 0, 0)
}

.field-cell__switch {
  padding-top: 6px;
  padding-bottom: 6px
}

.field {
  padding: 7px 15px;
  color: #333
}

// .field-wrapped {
//   margin: 0 15px;
//   display: flex;
//   flex-direction: row;
//   background-color: #fff
// }

// .field-wrapped::after {
//   left: 0;
//   border-width: 1px;
//   border-radius: 4px
// }

// .field-wrapped + .field-wrapped {
//   margin-top: 10px
// }

.field-error {
  color: #f40
}

// .field-wrapped.field-error::after {
//   border-color: #f40
// }

.field-title {
  color: #333;
  min-width: 65px;
  padding-right: 10px
}

.field-input {
  flex: 1;
  line-height: 1.6em;
  padding: 4px 0;
  min-height: 22px;
  height: auto;
  font-size: 14px
}

.field-placeholder {
  font-size: 14px
}

.field-input__right {
  text-align: right;
}

.clear-content{
  background-color: transparent;
  padding: 0 3px;
  .clear-btn {
    color: #ccc;
    font-size: 20px;
    line-height: 1.6em;
  }
}
</style>
<template>
  <view class="field-cell field {{ !showError ? 'field-error' : '' }}">
    <view
      wx:if="{{ config.label }}"
      class="field-cell__hd field-title">{{ config.label }}</view>
    <textarea
      wx:if="{{ config.type === 'textarea' }}"
      auto-height
      maxlength="{{config.maxlength}}"
      value="{{ config.value }}"
      placeholder="{{ config.placeholder }}"
      disabled="{{config.disabled}}"
      focus="{{config.focus}}"
      class="field-input field-cell__bd {{ config.right ? 'field-input__right' : '' }}"
      placeholder-class="field-placeholder"
      bindinput="_handleFieldChange"
      bindfocus="_handleFieldFocus"
      bindblur="_handleFieldBlur"
      data-component-id="{{ config.componentId || '' }}"></textarea>
    <input
      wx:else
      type="{{ config.inputType || 'text' }}"
      maxlength="{{config.maxlength}}"
      value="{{ config.value }}"
      placeholder="{{ config.placeholder }}"
      disabled="{{config.disabled}}"
      focus="{{config.focus}}"
      class="field-input field-cell__bd {{ config.right ? 'field-input__right' : '' }}"
      placeholder-class="field-placeholder"
      adjust-position="{{config.adjust}}"
      bindinput="_handleFieldChange"
      bindfocus="_handleFieldFocus"
      bindblur="_handleFieldBlur"
      data-component-id="{{ config.componentId || '' }}"/>
      <view wx:if="{{ config.clear && showClose }}" class="clear-content" catchtap="_handleClear">
        <text class="kai-iconfont kai-icon-closebg clear-btn"></text>
      </view>
  </view>
</template>

<script>
  import wepy from 'wepy'

  export default class Input extends wepy.component {
    props = {
      config: {
        type: Object,
        coerce (c) {
          const obj = {
            error: Boolean(c.error) && true,
            clear: Boolean(c.clear) && true,
            adjust: Boolean(c.adjust) && true,
            value: c.value || '',
            label: c.label || '',
            componentId: c.componentId || '',
            inputType: c.inputType || 'text',
            type: c.type || '',
            placeholder: c.placeholder || '',
            disabled: Boolean(c.disabled) && true,
            focus: Boolean(c.focus) && true,
            right: Boolean(c.right) && true,
            maxlength: c.maxlength || 9999,
            filter: c.filter || ''
          }
          return obj
        }
      }
    }

    components = {}

    data = {
      showClose: false,
      showError: true
    }

    methods = {
      _handleClear () {
        this.config.value = ' '
        setTimeout(() => {
          this.config.value = ''
          this.showClose = false
          this.$apply()
        }, 10)
        this.$emit('onInput', '')
      },
      _handleFieldChange (e) {
        const value = e.detail.value
        const {config} = this
        if (config.clear) {
          this.showClose = value.length > 0
        }
        this.$emit('onInput', value)
      },
      _handleFieldFocus (e) {
        // console.log(77777)
      },
      _handleFieldBlur (e) {
        const value = e.detail.value
        const {config} = this
        if (config.filter) {
          this.showError = config.filter.test(value)
        }
        this.$emit('onBlur', value)
      }
    }

    onLoad () {
      const {config} = this
      if (config.clear) {
        this.showClose = config.value.length > 0
        this.$apply()
      }
    }
  }
</script>
