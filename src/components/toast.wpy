<style lang="less">
.toast {
  .toast-wrap {
    position: fixed;
    z-index: 999;
    left: 50%;
    padding: 10px 15px;
    background: rgba(0, 0, 0, 0.8);
    color: #fff;
    font-size: 12px;
    border-radius: 2px;
    opacity: 0;
    transition: opacity 0.3s;
    text-align: center;
    display: none;
    .toast-wrap__icon {
      margin-bottom: 2px;
      .kai-iconfont {
        font-weight: bold;
      }
      .kai-iconfont {
        font-size: 50rpx;
      }
      .loading-content {
        margin-top: 5px;
        margin-bottom: 15px;
      }
      .toast-loading {
        .loading-type {
          border-color: #fff;
          border-top-color: #666;
        }
      }
    }
  }
  .toast-show {
    opacity: 1;
    display: block;
    .icon-loading {
      animation: btn-spin 1s linear infinite;
    }
  }
  .toast-middle {
    top: 50%;
    transform: translate(-50%, -50%);
  }
  .toast-top {
    top: 0;
    transform: translateX(-50%);
  }
  .toast-bottom {
    bottom: 0;
    transform: translateX(-50%);
  }
}
</style>
<template>
  <view class="toast">
    <view class="toast-wrap toast-{{toast.position}} toast-{{toast.show?'show':'hide'}}">
      <view wx:if="{{toast.type}}" class="toast-wrap__icon">
        <iconSucess wx:if="{{toast.type==='success'}}" type="tick"/>
        <iconError wx:if="{{toast.type==='error'}}" type="error"/>
        <iconWarn wx:if="{{toast.type==='warning'}}" type="info"/>
        <iconLoading
          wx:if="{{toast.type==='loading'}}"
          type="circle"
          size="big"
          class="toast-loading"
        />
      </view>
      <view>{{toast.content}}</view>
    </view>
  </view>
</template>

<script>
import wepy from "wepy";
import Icon from "./icon";
import Loading from "./loading";

export default class Toast extends wepy.component {
  data = {
    toast: {
      show: false
    },
    timer: ""
  };
  components = {
    iconSucess: Icon,
    iconError: Icon,
    iconWarn: Icon,
    iconLoading: Loading
  };

  show(options) {
    const { timer } = this;
    if (timer) {
      this.toast.show = false;
      this.$apply();
      clearTimeout(this.timer);
    }
    this.toast = {
      show: true,
      type: options.type,
      content: options.content,
      duration: options.duration || 3000,
      position: options.position || "middle"
    };
    this.$apply();

    this.timer = setTimeout(() => {
      this.toast.show = false;
      this.$apply();
      options.afterClose && this.$emit(options.afterClose);
    }, +this.toast.duration);
  }
}
</script>
